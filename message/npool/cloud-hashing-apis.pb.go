// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cloud-hashing-apis.proto

package npool

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex int32 `protobuf:"varint,100,opt,name=PageIndex,proto3" json:"PageIndex,omitempty"`
	PageSize  int32 `protobuf:"varint,101,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{0}
}

func (x *PageInfo) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *PageInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Request body and response
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type VendorLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,300,opt,name=ID,proto3" json:"ID,omitempty"`
	Country  string `protobuf:"bytes,301,opt,name=Country,proto3" json:"Country,omitempty"`
	Province string `protobuf:"bytes,302,opt,name=Province,proto3" json:"Province,omitempty"`
	City     string `protobuf:"bytes,303,opt,name=City,proto3" json:"City,omitempty"`
	Address  string `protobuf:"bytes,304,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *VendorLocationInfo) Reset() {
	*x = VendorLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLocationInfo) ProtoMessage() {}

func (x *VendorLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLocationInfo.ProtoReflect.Descriptor instead.
func (*VendorLocationInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{2}
}

func (x *VendorLocationInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VendorLocationInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VendorLocationInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *VendorLocationInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *VendorLocationInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type TargetAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1000,opt,name=ID,proto3" json:"ID,omitempty"`
	Continent string `protobuf:"bytes,1001,opt,name=Continent,proto3" json:"Continent,omitempty"`
	Country   string `protobuf:"bytes,1002,opt,name=Country,proto3" json:"Country,omitempty"`
}

func (x *TargetAreaInfo) Reset() {
	*x = TargetAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetAreaInfo) ProtoMessage() {}

func (x *TargetAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetAreaInfo.ProtoReflect.Descriptor instead.
func (*TargetAreaInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{3}
}

func (x *TargetAreaInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TargetAreaInfo) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *TargetAreaInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1700,opt,name=ID,proto3" json:"ID,omitempty"`
	Type            string `protobuf:"bytes,1701,opt,name=Type,proto3" json:"Type,omitempty"`
	Manufacturer    string `protobuf:"bytes,1702,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty"`
	PowerComsuption int32  `protobuf:"varint,1703,opt,name=PowerComsuption,proto3" json:"PowerComsuption,omitempty"`
	ShipmentAt      int32  `protobuf:"varint,1704,opt,name=ShipmentAt,proto3" json:"ShipmentAt,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeviceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetPowerComsuption() int32 {
	if x != nil {
		return x.PowerComsuption
	}
	return 0
}

func (x *DeviceInfo) GetShipmentAt() int32 {
	if x != nil {
		return x.ShipmentAt
	}
	return 0
}

type GoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string   `protobuf:"bytes,2400,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfoID       string   `protobuf:"bytes,2401,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty"`
	SeparateFee        bool     `protobuf:"varint,2403,opt,name=SeparateFee,proto3" json:"SeparateFee,omitempty"`
	UnitPower          int32    `protobuf:"varint,2404,opt,name=UnitPower,proto3" json:"UnitPower,omitempty"`
	DurationDays       int32    `protobuf:"varint,2405,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinInfoID         string   `protobuf:"bytes,2406,opt,name=CoinInfoID,proto3" json:"CoinInfoID,omitempty"`
	Actuals            bool     `protobuf:"varint,2407,opt,name=Actuals,proto3" json:"Actuals,omitempty"`
	DeliveryAt         int32    `protobuf:"varint,2408,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	InheritFromGoodID  string   `protobuf:"bytes,2409,opt,name=InheritFromGoodID,proto3" json:"InheritFromGoodID,omitempty"`
	VendorLocationID   string   `protobuf:"bytes,2410,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	Price              float64  `protobuf:"fixed64,2411,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType        string   `protobuf:"bytes,2412,opt,name=BenefitType,proto3" json:"BenefitType,omitempty"`
	Classic            bool     `protobuf:"varint,2413,opt,name=Classic,proto3" json:"Classic,omitempty"`
	SupportCoinTypeIDs []string `protobuf:"bytes,2414,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	Total              int32    `protobuf:"varint,2415,opt,name=Total,proto3" json:"Total,omitempty"`
	PriceCurrency      string   `protobuf:"bytes,2416,opt,name=PriceCurrency,proto3" json:"PriceCurrency,omitempty"`
	Title              string   `protobuf:"bytes,2417,opt,name=Title,proto3" json:"Title,omitempty"`
	Unit               string   `protobuf:"bytes,2418,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Start              uint32   `protobuf:"varint,2419,opt,name=Start,proto3" json:"Start,omitempty"`
}

func (x *GoodInfo) Reset() {
	*x = GoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodInfo) ProtoMessage() {}

func (x *GoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodInfo.ProtoReflect.Descriptor instead.
func (*GoodInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{5}
}

func (x *GoodInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodInfo) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *GoodInfo) GetSeparateFee() bool {
	if x != nil {
		return x.SeparateFee
	}
	return false
}

func (x *GoodInfo) GetUnitPower() int32 {
	if x != nil {
		return x.UnitPower
	}
	return 0
}

func (x *GoodInfo) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *GoodInfo) GetCoinInfoID() string {
	if x != nil {
		return x.CoinInfoID
	}
	return ""
}

func (x *GoodInfo) GetActuals() bool {
	if x != nil {
		return x.Actuals
	}
	return false
}

func (x *GoodInfo) GetDeliveryAt() int32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *GoodInfo) GetInheritFromGoodID() string {
	if x != nil {
		return x.InheritFromGoodID
	}
	return ""
}

func (x *GoodInfo) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *GoodInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodInfo) GetBenefitType() string {
	if x != nil {
		return x.BenefitType
	}
	return ""
}

func (x *GoodInfo) GetClassic() bool {
	if x != nil {
		return x.Classic
	}
	return false
}

func (x *GoodInfo) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *GoodInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GoodInfo) GetPriceCurrency() string {
	if x != nil {
		return x.PriceCurrency
	}
	return ""
}

func (x *GoodInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoodInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GoodInfo) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type PriceCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,3010,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,3011,opt,name=Name,proto3" json:"Name,omitempty"`
	Unit   string `protobuf:"bytes,3012,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Symbol string `protobuf:"bytes,3013,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (x *PriceCurrency) Reset() {
	*x = PriceCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceCurrency) ProtoMessage() {}

func (x *PriceCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceCurrency.ProtoReflect.Descriptor instead.
func (*PriceCurrency) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{6}
}

func (x *PriceCurrency) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PriceCurrency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PriceCurrency) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PriceCurrency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,3020,opt,name=ID,proto3" json:"ID,omitempty"`
	PreSale bool   `protobuf:"varint,3021,opt,name=PreSale,proto3" json:"PreSale,omitempty"`
	Name    string `protobuf:"bytes,3022,opt,name=Name,proto3" json:"Name,omitempty"`
	Unit    string `protobuf:"bytes,3023,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Logo    string `protobuf:"bytes,3024,opt,name=Logo,proto3" json:"Logo,omitempty"`
}

func (x *CoinInfo) Reset() {
	*x = CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinInfo) ProtoMessage() {}

func (x *CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinInfo.ProtoReflect.Descriptor instead.
func (*CoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{7}
}

func (x *CoinInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinInfo) GetPreSale() bool {
	if x != nil {
		return x.PreSale
	}
	return false
}

func (x *CoinInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *CoinInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type GoodDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string              `protobuf:"bytes,2400,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfo      *DeviceInfo         `protobuf:"bytes,2401,opt,name=DeviceInfo,proto3" json:"DeviceInfo,omitempty"`
	SeparateFee     bool                `protobuf:"varint,2403,opt,name=SeparateFee,proto3" json:"SeparateFee,omitempty"`
	UnitPower       int32               `protobuf:"varint,2404,opt,name=UnitPower,proto3" json:"UnitPower,omitempty"`
	DurationDays    int32               `protobuf:"varint,2405,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinInfo        *CoinInfo           `protobuf:"bytes,2406,opt,name=CoinInfo,proto3" json:"CoinInfo,omitempty"`
	Actuals         bool                `protobuf:"varint,2407,opt,name=Actuals,proto3" json:"Actuals,omitempty"`
	DeliveryAt      int32               `protobuf:"varint,2408,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	InheritFromGood *GoodInfo           `protobuf:"bytes,2409,opt,name=InheritFromGood,proto3" json:"InheritFromGood,omitempty"`
	VendorLocation  *VendorLocationInfo `protobuf:"bytes,2410,opt,name=VendorLocation,proto3" json:"VendorLocation,omitempty"`
	Price           float64             `protobuf:"fixed64,2411,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType     string              `protobuf:"bytes,2412,opt,name=BenefitType,proto3" json:"BenefitType,omitempty"`
	Classic         bool                `protobuf:"varint,2413,opt,name=Classic,proto3" json:"Classic,omitempty"`
	SupportCoins    []*CoinInfo         `protobuf:"bytes,2414,rep,name=SupportCoins,proto3" json:"SupportCoins,omitempty"`
	Total           int32               `protobuf:"varint,2415,opt,name=Total,proto3" json:"Total,omitempty"`
	Extra           *GoodExtraInfo      `protobuf:"bytes,2416,opt,name=Extra,proto3" json:"Extra,omitempty"`
	Title           string              `protobuf:"bytes,2417,opt,name=Title,proto3" json:"Title,omitempty"`
	Unit            string              `protobuf:"bytes,2418,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Start           uint32              `protobuf:"varint,2419,opt,name=Start,proto3" json:"Start,omitempty"`
	PriceCurrency   *PriceCurrency      `protobuf:"bytes,2420,opt,name=PriceCurrency,proto3" json:"PriceCurrency,omitempty"`
}

func (x *GoodDetail) Reset() {
	*x = GoodDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodDetail) ProtoMessage() {}

func (x *GoodDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodDetail.ProtoReflect.Descriptor instead.
func (*GoodDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{8}
}

func (x *GoodDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodDetail) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *GoodDetail) GetSeparateFee() bool {
	if x != nil {
		return x.SeparateFee
	}
	return false
}

func (x *GoodDetail) GetUnitPower() int32 {
	if x != nil {
		return x.UnitPower
	}
	return 0
}

func (x *GoodDetail) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *GoodDetail) GetCoinInfo() *CoinInfo {
	if x != nil {
		return x.CoinInfo
	}
	return nil
}

func (x *GoodDetail) GetActuals() bool {
	if x != nil {
		return x.Actuals
	}
	return false
}

func (x *GoodDetail) GetDeliveryAt() int32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *GoodDetail) GetInheritFromGood() *GoodInfo {
	if x != nil {
		return x.InheritFromGood
	}
	return nil
}

func (x *GoodDetail) GetVendorLocation() *VendorLocationInfo {
	if x != nil {
		return x.VendorLocation
	}
	return nil
}

func (x *GoodDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodDetail) GetBenefitType() string {
	if x != nil {
		return x.BenefitType
	}
	return ""
}

func (x *GoodDetail) GetClassic() bool {
	if x != nil {
		return x.Classic
	}
	return false
}

func (x *GoodDetail) GetSupportCoins() []*CoinInfo {
	if x != nil {
		return x.SupportCoins
	}
	return nil
}

func (x *GoodDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GoodDetail) GetExtra() *GoodExtraInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *GoodDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoodDetail) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GoodDetail) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GoodDetail) GetPriceCurrency() *PriceCurrency {
	if x != nil {
		return x.PriceCurrency
	}
	return nil
}

type GetGoodsDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID    string    `protobuf:"bytes,3210,opt,name=AppID,proto3" json:"AppID,omitempty"`
	PageInfo *PageInfo `protobuf:"bytes,3211,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetGoodsDetailRequest) Reset() {
	*x = GetGoodsDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDetailRequest) ProtoMessage() {}

func (x *GetGoodsDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDetailRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{9}
}

func (x *GetGoodsDetailRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetGoodsDetailRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetGoodsDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*GoodDetail `protobuf:"bytes,3212,rep,name=Details,proto3" json:"Details,omitempty"`
	Total   int32         `protobuf:"varint,3213,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsDetailResponse) Reset() {
	*x = GetGoodsDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDetailResponse) ProtoMessage() {}

func (x *GetGoodsDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDetailResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{10}
}

func (x *GetGoodsDetailResponse) GetDetails() []*GoodDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetGoodsDetailResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GoodExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string   `protobuf:"bytes,5100,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID    string   `protobuf:"bytes,5101,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Posters   []string `protobuf:"bytes,5102,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels    []string `protobuf:"bytes,5103,rep,name=Labels,proto3" json:"Labels,omitempty"`
	OutSale   bool     `protobuf:"varint,5104,opt,name=OutSale,proto3" json:"OutSale,omitempty"`
	PreSale   bool     `protobuf:"varint,5105,opt,name=PreSale,proto3" json:"PreSale,omitempty"`
	VoteCount uint32   `protobuf:"varint,5106,opt,name=VoteCount,proto3" json:"VoteCount,omitempty"`
	Rating    float32  `protobuf:"fixed32,5107,opt,name=Rating,proto3" json:"Rating,omitempty"`
}

func (x *GoodExtraInfo) Reset() {
	*x = GoodExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodExtraInfo) ProtoMessage() {}

func (x *GoodExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodExtraInfo.ProtoReflect.Descriptor instead.
func (*GoodExtraInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{11}
}

func (x *GoodExtraInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodExtraInfo) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodExtraInfo) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *GoodExtraInfo) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GoodExtraInfo) GetOutSale() bool {
	if x != nil {
		return x.OutSale
	}
	return false
}

func (x *GoodExtraInfo) GetPreSale() bool {
	if x != nil {
		return x.PreSale
	}
	return false
}

func (x *GoodExtraInfo) GetVoteCount() uint32 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *GoodExtraInfo) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

var File_npool_cloud_hashing_apis_proto protoreflect.FileDescriptor

var file_npool_cloud_hashing_apis_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x26, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8d, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x13, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x5b, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xa3, 0x01,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0xa4, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x13, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa5, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0xa6, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa7, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x18, 0xa8, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x22, 0xe7, 0x04, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe0, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x44, 0x18, 0xe1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0xe3, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe4, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0xe5, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0xe6, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x19,
	0x0a, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x18, 0xe7, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xe8, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0xe9, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xea, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0xeb, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xec, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x18, 0xed, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x12, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x73, 0x18, 0xee, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x15, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xef, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0xf0, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0xf1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xf2, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0xf3, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x63, 0x0a,
	0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xc2, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc3, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xc4, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0xc5, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x22, 0x75, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xcc, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x19, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x18, 0xcd, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0xce, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xcf, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xd0, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0xe1, 0x06, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe0,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe1, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0xe3, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe4, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18,
	0xe5, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xe6, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x18, 0xe7, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xe8, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x4a,
	0x0a, 0x0f, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f,
	0x64, 0x18, 0xe9, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x49, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xea, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xeb, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xec, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x18, 0xed, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0xee, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0xef, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0xf0, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x15, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0xf1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xf2, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xf3, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0xf4, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0x6c, 0x0a,
	0x15, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18,
	0x8a, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3c, 0x0a,
	0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8b, 0x19, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x16, 0x47,
	0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x18, 0x8c, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x8d, 0x19, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x47,
	0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0xec, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a,
	0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xed, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x18, 0xee, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72,
	0x73, 0x12, 0x17, 0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xef, 0x27, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x75,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x18, 0xf0, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4f, 0x75,
	0x74, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x18, 0xf1, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf2, 0x27,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x17, 0x0a, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xf3, 0x27, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x06, 0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x32, 0x83, 0x02, 0x0a, 0x10, 0x43, 0x6c, 0x6f,
	0x75, 0x64, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x73, 0x12, 0x5e, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d,
	0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f, 0x67,
	0x6f, 0x6f, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x42, 0x3b,
	0x5a, 0x39, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f,
	0x6f, 0x6c, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2d, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_npool_cloud_hashing_apis_proto_rawDescOnce sync.Once
	file_npool_cloud_hashing_apis_proto_rawDescData = file_npool_cloud_hashing_apis_proto_rawDesc
)

func file_npool_cloud_hashing_apis_proto_rawDescGZIP() []byte {
	file_npool_cloud_hashing_apis_proto_rawDescOnce.Do(func() {
		file_npool_cloud_hashing_apis_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cloud_hashing_apis_proto_rawDescData)
	})
	return file_npool_cloud_hashing_apis_proto_rawDescData
}

var file_npool_cloud_hashing_apis_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_npool_cloud_hashing_apis_proto_goTypes = []interface{}{
	(*PageInfo)(nil),               // 0: cloud.hashing.apis.v1.PageInfo
	(*VersionResponse)(nil),        // 1: cloud.hashing.apis.v1.VersionResponse
	(*VendorLocationInfo)(nil),     // 2: cloud.hashing.apis.v1.VendorLocationInfo
	(*TargetAreaInfo)(nil),         // 3: cloud.hashing.apis.v1.TargetAreaInfo
	(*DeviceInfo)(nil),             // 4: cloud.hashing.apis.v1.DeviceInfo
	(*GoodInfo)(nil),               // 5: cloud.hashing.apis.v1.GoodInfo
	(*PriceCurrency)(nil),          // 6: cloud.hashing.apis.v1.PriceCurrency
	(*CoinInfo)(nil),               // 7: cloud.hashing.apis.v1.CoinInfo
	(*GoodDetail)(nil),             // 8: cloud.hashing.apis.v1.GoodDetail
	(*GetGoodsDetailRequest)(nil),  // 9: cloud.hashing.apis.v1.GetGoodsDetailRequest
	(*GetGoodsDetailResponse)(nil), // 10: cloud.hashing.apis.v1.GetGoodsDetailResponse
	(*GoodExtraInfo)(nil),          // 11: cloud.hashing.apis.v1.GoodExtraInfo
	(*emptypb.Empty)(nil),          // 12: google.protobuf.Empty
}
var file_npool_cloud_hashing_apis_proto_depIdxs = []int32{
	4,  // 0: cloud.hashing.apis.v1.GoodDetail.DeviceInfo:type_name -> cloud.hashing.apis.v1.DeviceInfo
	7,  // 1: cloud.hashing.apis.v1.GoodDetail.CoinInfo:type_name -> cloud.hashing.apis.v1.CoinInfo
	5,  // 2: cloud.hashing.apis.v1.GoodDetail.InheritFromGood:type_name -> cloud.hashing.apis.v1.GoodInfo
	2,  // 3: cloud.hashing.apis.v1.GoodDetail.VendorLocation:type_name -> cloud.hashing.apis.v1.VendorLocationInfo
	7,  // 4: cloud.hashing.apis.v1.GoodDetail.SupportCoins:type_name -> cloud.hashing.apis.v1.CoinInfo
	11, // 5: cloud.hashing.apis.v1.GoodDetail.Extra:type_name -> cloud.hashing.apis.v1.GoodExtraInfo
	6,  // 6: cloud.hashing.apis.v1.GoodDetail.PriceCurrency:type_name -> cloud.hashing.apis.v1.PriceCurrency
	0,  // 7: cloud.hashing.apis.v1.GetGoodsDetailRequest.PageInfo:type_name -> cloud.hashing.apis.v1.PageInfo
	8,  // 8: cloud.hashing.apis.v1.GetGoodsDetailResponse.Details:type_name -> cloud.hashing.apis.v1.GoodDetail
	12, // 9: cloud.hashing.apis.v1.CloudHashingApis.Version:input_type -> google.protobuf.Empty
	9,  // 10: cloud.hashing.apis.v1.CloudHashingApis.GetGoodsDetail:input_type -> cloud.hashing.apis.v1.GetGoodsDetailRequest
	1,  // 11: cloud.hashing.apis.v1.CloudHashingApis.Version:output_type -> cloud.hashing.apis.v1.VersionResponse
	10, // 12: cloud.hashing.apis.v1.CloudHashingApis.GetGoodsDetail:output_type -> cloud.hashing.apis.v1.GetGoodsDetailResponse
	11, // [11:13] is the sub-list for method output_type
	9,  // [9:11] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_npool_cloud_hashing_apis_proto_init() }
func file_npool_cloud_hashing_apis_proto_init() {
	if File_npool_cloud_hashing_apis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cloud_hashing_apis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cloud_hashing_apis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cloud_hashing_apis_proto_goTypes,
		DependencyIndexes: file_npool_cloud_hashing_apis_proto_depIdxs,
		MessageInfos:      file_npool_cloud_hashing_apis_proto_msgTypes,
	}.Build()
	File_npool_cloud_hashing_apis_proto = out.File
	file_npool_cloud_hashing_apis_proto_rawDesc = nil
	file_npool_cloud_hashing_apis_proto_goTypes = nil
	file_npool_cloud_hashing_apis_proto_depIdxs = nil
}
