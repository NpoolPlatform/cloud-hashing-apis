// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.18.1
// source: npool/cloud-hashing-apis.proto

package npool

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PageInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PageIndex int32 `protobuf:"varint,100,opt,name=PageIndex,proto3" json:"PageIndex,omitempty"`
	PageSize  int32 `protobuf:"varint,101,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
}

func (x *PageInfo) Reset() {
	*x = PageInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PageInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PageInfo) ProtoMessage() {}

func (x *PageInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PageInfo.ProtoReflect.Descriptor instead.
func (*PageInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{0}
}

func (x *PageInfo) GetPageIndex() int32 {
	if x != nil {
		return x.PageIndex
	}
	return 0
}

func (x *PageInfo) GetPageSize() int32 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

// Request body and response
type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,200,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{1}
}

func (x *VersionResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

type VendorLocationInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       string `protobuf:"bytes,300,opt,name=ID,proto3" json:"ID,omitempty"`
	Country  string `protobuf:"bytes,301,opt,name=Country,proto3" json:"Country,omitempty"`
	Province string `protobuf:"bytes,302,opt,name=Province,proto3" json:"Province,omitempty"`
	City     string `protobuf:"bytes,303,opt,name=City,proto3" json:"City,omitempty"`
	Address  string `protobuf:"bytes,304,opt,name=Address,proto3" json:"Address,omitempty"`
}

func (x *VendorLocationInfo) Reset() {
	*x = VendorLocationInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VendorLocationInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VendorLocationInfo) ProtoMessage() {}

func (x *VendorLocationInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VendorLocationInfo.ProtoReflect.Descriptor instead.
func (*VendorLocationInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{2}
}

func (x *VendorLocationInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *VendorLocationInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *VendorLocationInfo) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *VendorLocationInfo) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *VendorLocationInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type TargetAreaInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,1000,opt,name=ID,proto3" json:"ID,omitempty"`
	Continent string `protobuf:"bytes,1001,opt,name=Continent,proto3" json:"Continent,omitempty"`
	Country   string `protobuf:"bytes,1002,opt,name=Country,proto3" json:"Country,omitempty"`
}

func (x *TargetAreaInfo) Reset() {
	*x = TargetAreaInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetAreaInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetAreaInfo) ProtoMessage() {}

func (x *TargetAreaInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetAreaInfo.ProtoReflect.Descriptor instead.
func (*TargetAreaInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{3}
}

func (x *TargetAreaInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *TargetAreaInfo) GetContinent() string {
	if x != nil {
		return x.Continent
	}
	return ""
}

func (x *TargetAreaInfo) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

type DeviceInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,1700,opt,name=ID,proto3" json:"ID,omitempty"`
	Type            string `protobuf:"bytes,1701,opt,name=Type,proto3" json:"Type,omitempty"`
	Manufacturer    string `protobuf:"bytes,1702,opt,name=Manufacturer,proto3" json:"Manufacturer,omitempty"`
	PowerComsuption int32  `protobuf:"varint,1703,opt,name=PowerComsuption,proto3" json:"PowerComsuption,omitempty"`
	ShipmentAt      int32  `protobuf:"varint,1704,opt,name=ShipmentAt,proto3" json:"ShipmentAt,omitempty"`
}

func (x *DeviceInfo) Reset() {
	*x = DeviceInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceInfo) ProtoMessage() {}

func (x *DeviceInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceInfo.ProtoReflect.Descriptor instead.
func (*DeviceInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{4}
}

func (x *DeviceInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DeviceInfo) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *DeviceInfo) GetManufacturer() string {
	if x != nil {
		return x.Manufacturer
	}
	return ""
}

func (x *DeviceInfo) GetPowerComsuption() int32 {
	if x != nil {
		return x.PowerComsuption
	}
	return 0
}

func (x *DeviceInfo) GetShipmentAt() int32 {
	if x != nil {
		return x.ShipmentAt
	}
	return 0
}

type GoodInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 string   `protobuf:"bytes,2400,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfoID       string   `protobuf:"bytes,2401,opt,name=DeviceInfoID,proto3" json:"DeviceInfoID,omitempty"`
	SeparateFee        bool     `protobuf:"varint,2403,opt,name=SeparateFee,proto3" json:"SeparateFee,omitempty"`
	UnitPower          int32    `protobuf:"varint,2404,opt,name=UnitPower,proto3" json:"UnitPower,omitempty"`
	DurationDays       int32    `protobuf:"varint,2405,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinInfoID         string   `protobuf:"bytes,2406,opt,name=CoinInfoID,proto3" json:"CoinInfoID,omitempty"`
	Actuals            bool     `protobuf:"varint,2407,opt,name=Actuals,proto3" json:"Actuals,omitempty"`
	DeliveryAt         int32    `protobuf:"varint,2408,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	InheritFromGoodID  string   `protobuf:"bytes,2409,opt,name=InheritFromGoodID,proto3" json:"InheritFromGoodID,omitempty"`
	VendorLocationID   string   `protobuf:"bytes,2410,opt,name=VendorLocationID,proto3" json:"VendorLocationID,omitempty"`
	Price              float64  `protobuf:"fixed64,2411,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType        string   `protobuf:"bytes,2412,opt,name=BenefitType,proto3" json:"BenefitType,omitempty"`
	Classic            bool     `protobuf:"varint,2413,opt,name=Classic,proto3" json:"Classic,omitempty"`
	SupportCoinTypeIDs []string `protobuf:"bytes,2414,rep,name=SupportCoinTypeIDs,proto3" json:"SupportCoinTypeIDs,omitempty"`
	Total              int32    `protobuf:"varint,2415,opt,name=Total,proto3" json:"Total,omitempty"`
	PriceCurrency      string   `protobuf:"bytes,2416,opt,name=PriceCurrency,proto3" json:"PriceCurrency,omitempty"`
	Title              string   `protobuf:"bytes,2417,opt,name=Title,proto3" json:"Title,omitempty"`
	Unit               string   `protobuf:"bytes,2418,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Start              uint32   `protobuf:"varint,2419,opt,name=Start,proto3" json:"Start,omitempty"`
}

func (x *GoodInfo) Reset() {
	*x = GoodInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodInfo) ProtoMessage() {}

func (x *GoodInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodInfo.ProtoReflect.Descriptor instead.
func (*GoodInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{5}
}

func (x *GoodInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodInfo) GetDeviceInfoID() string {
	if x != nil {
		return x.DeviceInfoID
	}
	return ""
}

func (x *GoodInfo) GetSeparateFee() bool {
	if x != nil {
		return x.SeparateFee
	}
	return false
}

func (x *GoodInfo) GetUnitPower() int32 {
	if x != nil {
		return x.UnitPower
	}
	return 0
}

func (x *GoodInfo) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *GoodInfo) GetCoinInfoID() string {
	if x != nil {
		return x.CoinInfoID
	}
	return ""
}

func (x *GoodInfo) GetActuals() bool {
	if x != nil {
		return x.Actuals
	}
	return false
}

func (x *GoodInfo) GetDeliveryAt() int32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *GoodInfo) GetInheritFromGoodID() string {
	if x != nil {
		return x.InheritFromGoodID
	}
	return ""
}

func (x *GoodInfo) GetVendorLocationID() string {
	if x != nil {
		return x.VendorLocationID
	}
	return ""
}

func (x *GoodInfo) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodInfo) GetBenefitType() string {
	if x != nil {
		return x.BenefitType
	}
	return ""
}

func (x *GoodInfo) GetClassic() bool {
	if x != nil {
		return x.Classic
	}
	return false
}

func (x *GoodInfo) GetSupportCoinTypeIDs() []string {
	if x != nil {
		return x.SupportCoinTypeIDs
	}
	return nil
}

func (x *GoodInfo) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GoodInfo) GetPriceCurrency() string {
	if x != nil {
		return x.PriceCurrency
	}
	return ""
}

func (x *GoodInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoodInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GoodInfo) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

type PriceCurrency struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string `protobuf:"bytes,3010,opt,name=ID,proto3" json:"ID,omitempty"`
	Name   string `protobuf:"bytes,3011,opt,name=Name,proto3" json:"Name,omitempty"`
	Unit   string `protobuf:"bytes,3012,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Symbol string `protobuf:"bytes,3013,opt,name=Symbol,proto3" json:"Symbol,omitempty"`
}

func (x *PriceCurrency) Reset() {
	*x = PriceCurrency{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PriceCurrency) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PriceCurrency) ProtoMessage() {}

func (x *PriceCurrency) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PriceCurrency.ProtoReflect.Descriptor instead.
func (*PriceCurrency) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{6}
}

func (x *PriceCurrency) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *PriceCurrency) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PriceCurrency) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *PriceCurrency) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

type CoinInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,3020,opt,name=ID,proto3" json:"ID,omitempty"`
	PreSale bool   `protobuf:"varint,3021,opt,name=PreSale,proto3" json:"PreSale,omitempty"`
	Name    string `protobuf:"bytes,3022,opt,name=Name,proto3" json:"Name,omitempty"`
	Unit    string `protobuf:"bytes,3023,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Logo    string `protobuf:"bytes,3024,opt,name=Logo,proto3" json:"Logo,omitempty"`
}

func (x *CoinInfo) Reset() {
	*x = CoinInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CoinInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CoinInfo) ProtoMessage() {}

func (x *CoinInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CoinInfo.ProtoReflect.Descriptor instead.
func (*CoinInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{7}
}

func (x *CoinInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CoinInfo) GetPreSale() bool {
	if x != nil {
		return x.PreSale
	}
	return false
}

func (x *CoinInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CoinInfo) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *CoinInfo) GetLogo() string {
	if x != nil {
		return x.Logo
	}
	return ""
}

type GoodDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string              `protobuf:"bytes,2400,opt,name=ID,proto3" json:"ID,omitempty"`
	DeviceInfo      *DeviceInfo         `protobuf:"bytes,2401,opt,name=DeviceInfo,proto3" json:"DeviceInfo,omitempty"`
	SeparateFee     bool                `protobuf:"varint,2403,opt,name=SeparateFee,proto3" json:"SeparateFee,omitempty"`
	UnitPower       int32               `protobuf:"varint,2404,opt,name=UnitPower,proto3" json:"UnitPower,omitempty"`
	DurationDays    int32               `protobuf:"varint,2405,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	CoinInfo        *CoinInfo           `protobuf:"bytes,2406,opt,name=CoinInfo,proto3" json:"CoinInfo,omitempty"`
	Actuals         bool                `protobuf:"varint,2407,opt,name=Actuals,proto3" json:"Actuals,omitempty"`
	DeliveryAt      int32               `protobuf:"varint,2408,opt,name=DeliveryAt,proto3" json:"DeliveryAt,omitempty"`
	InheritFromGood *GoodInfo           `protobuf:"bytes,2409,opt,name=InheritFromGood,proto3" json:"InheritFromGood,omitempty"`
	VendorLocation  *VendorLocationInfo `protobuf:"bytes,2410,opt,name=VendorLocation,proto3" json:"VendorLocation,omitempty"`
	Price           float64             `protobuf:"fixed64,2411,opt,name=Price,proto3" json:"Price,omitempty"`
	BenefitType     string              `protobuf:"bytes,2412,opt,name=BenefitType,proto3" json:"BenefitType,omitempty"`
	Classic         bool                `protobuf:"varint,2413,opt,name=Classic,proto3" json:"Classic,omitempty"`
	SupportCoins    []*CoinInfo         `protobuf:"bytes,2414,rep,name=SupportCoins,proto3" json:"SupportCoins,omitempty"`
	Total           int32               `protobuf:"varint,2415,opt,name=Total,proto3" json:"Total,omitempty"`
	Extra           *GoodExtraInfo      `protobuf:"bytes,2416,opt,name=Extra,proto3" json:"Extra,omitempty"`
	Title           string              `protobuf:"bytes,2417,opt,name=Title,proto3" json:"Title,omitempty"`
	Unit            string              `protobuf:"bytes,2418,opt,name=Unit,proto3" json:"Unit,omitempty"`
	Start           uint32              `protobuf:"varint,2419,opt,name=Start,proto3" json:"Start,omitempty"`
	PriceCurrency   *PriceCurrency      `protobuf:"bytes,2420,opt,name=PriceCurrency,proto3" json:"PriceCurrency,omitempty"`
	Fees            []*Fee              `protobuf:"bytes,2421,rep,name=Fees,proto3" json:"Fees,omitempty"`
}

func (x *GoodDetail) Reset() {
	*x = GoodDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodDetail) ProtoMessage() {}

func (x *GoodDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodDetail.ProtoReflect.Descriptor instead.
func (*GoodDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{8}
}

func (x *GoodDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodDetail) GetDeviceInfo() *DeviceInfo {
	if x != nil {
		return x.DeviceInfo
	}
	return nil
}

func (x *GoodDetail) GetSeparateFee() bool {
	if x != nil {
		return x.SeparateFee
	}
	return false
}

func (x *GoodDetail) GetUnitPower() int32 {
	if x != nil {
		return x.UnitPower
	}
	return 0
}

func (x *GoodDetail) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *GoodDetail) GetCoinInfo() *CoinInfo {
	if x != nil {
		return x.CoinInfo
	}
	return nil
}

func (x *GoodDetail) GetActuals() bool {
	if x != nil {
		return x.Actuals
	}
	return false
}

func (x *GoodDetail) GetDeliveryAt() int32 {
	if x != nil {
		return x.DeliveryAt
	}
	return 0
}

func (x *GoodDetail) GetInheritFromGood() *GoodInfo {
	if x != nil {
		return x.InheritFromGood
	}
	return nil
}

func (x *GoodDetail) GetVendorLocation() *VendorLocationInfo {
	if x != nil {
		return x.VendorLocation
	}
	return nil
}

func (x *GoodDetail) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GoodDetail) GetBenefitType() string {
	if x != nil {
		return x.BenefitType
	}
	return ""
}

func (x *GoodDetail) GetClassic() bool {
	if x != nil {
		return x.Classic
	}
	return false
}

func (x *GoodDetail) GetSupportCoins() []*CoinInfo {
	if x != nil {
		return x.SupportCoins
	}
	return nil
}

func (x *GoodDetail) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GoodDetail) GetExtra() *GoodExtraInfo {
	if x != nil {
		return x.Extra
	}
	return nil
}

func (x *GoodDetail) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *GoodDetail) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *GoodDetail) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *GoodDetail) GetPriceCurrency() *PriceCurrency {
	if x != nil {
		return x.PriceCurrency
	}
	return nil
}

func (x *GoodDetail) GetFees() []*Fee {
	if x != nil {
		return x.Fees
	}
	return nil
}

type GetGoodDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetGoodDetailRequest) Reset() {
	*x = GetGoodDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodDetailRequest) ProtoMessage() {}

func (x *GetGoodDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodDetailRequest.ProtoReflect.Descriptor instead.
func (*GetGoodDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{9}
}

func (x *GetGoodDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetGoodDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *GoodDetail `protobuf:"bytes,1,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *GetGoodDetailResponse) Reset() {
	*x = GetGoodDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodDetailResponse) ProtoMessage() {}

func (x *GetGoodDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodDetailResponse.ProtoReflect.Descriptor instead.
func (*GetGoodDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{10}
}

func (x *GetGoodDetailResponse) GetDetail() *GoodDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetGoodsDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID    string    `protobuf:"bytes,3210,opt,name=AppID,proto3" json:"AppID,omitempty"`
	PageInfo *PageInfo `protobuf:"bytes,3211,opt,name=PageInfo,proto3" json:"PageInfo,omitempty"`
}

func (x *GetGoodsDetailRequest) Reset() {
	*x = GetGoodsDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDetailRequest) ProtoMessage() {}

func (x *GetGoodsDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDetailRequest.ProtoReflect.Descriptor instead.
func (*GetGoodsDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{11}
}

func (x *GetGoodsDetailRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetGoodsDetailRequest) GetPageInfo() *PageInfo {
	if x != nil {
		return x.PageInfo
	}
	return nil
}

type GetGoodsDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*GoodDetail `protobuf:"bytes,3212,rep,name=Details,proto3" json:"Details,omitempty"`
	Total   int32         `protobuf:"varint,3213,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *GetGoodsDetailResponse) Reset() {
	*x = GetGoodsDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGoodsDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGoodsDetailResponse) ProtoMessage() {}

func (x *GetGoodsDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGoodsDetailResponse.ProtoReflect.Descriptor instead.
func (*GetGoodsDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{12}
}

func (x *GetGoodsDetailResponse) GetDetails() []*GoodDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

func (x *GetGoodsDetailResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type GoodExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string   `protobuf:"bytes,5100,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID    string   `protobuf:"bytes,5101,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Posters   []string `protobuf:"bytes,5102,rep,name=Posters,proto3" json:"Posters,omitempty"`
	Labels    []string `protobuf:"bytes,5103,rep,name=Labels,proto3" json:"Labels,omitempty"`
	OutSale   bool     `protobuf:"varint,5104,opt,name=OutSale,proto3" json:"OutSale,omitempty"`
	PreSale   bool     `protobuf:"varint,5105,opt,name=PreSale,proto3" json:"PreSale,omitempty"`
	VoteCount uint32   `protobuf:"varint,5106,opt,name=VoteCount,proto3" json:"VoteCount,omitempty"`
	Rating    float32  `protobuf:"fixed32,5107,opt,name=Rating,proto3" json:"Rating,omitempty"`
}

func (x *GoodExtraInfo) Reset() {
	*x = GoodExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodExtraInfo) ProtoMessage() {}

func (x *GoodExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodExtraInfo.ProtoReflect.Descriptor instead.
func (*GoodExtraInfo) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{13}
}

func (x *GoodExtraInfo) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodExtraInfo) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *GoodExtraInfo) GetPosters() []string {
	if x != nil {
		return x.Posters
	}
	return nil
}

func (x *GoodExtraInfo) GetLabels() []string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *GoodExtraInfo) GetOutSale() bool {
	if x != nil {
		return x.OutSale
	}
	return false
}

func (x *GoodExtraInfo) GetPreSale() bool {
	if x != nil {
		return x.PreSale
	}
	return false
}

func (x *GoodExtraInfo) GetVoteCount() uint32 {
	if x != nil {
		return x.VoteCount
	}
	return 0
}

func (x *GoodExtraInfo) GetRating() float32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type GoodPaying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        string `protobuf:"bytes,200,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderID   string `protobuf:"bytes,201,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	PaymentID string `protobuf:"bytes,202,opt,name=PaymentID,proto3" json:"PaymentID,omitempty"`
}

func (x *GoodPaying) Reset() {
	*x = GoodPaying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodPaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodPaying) ProtoMessage() {}

func (x *GoodPaying) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodPaying.ProtoReflect.Descriptor instead.
func (*GoodPaying) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{14}
}

func (x *GoodPaying) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodPaying) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *GoodPaying) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

type GasPaying struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,700,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderID         string `protobuf:"bytes,701,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	PaymentID       string `protobuf:"bytes,702,opt,name=PaymentID,proto3" json:"PaymentID,omitempty"`
	DurationMinutes uint32 `protobuf:"varint,703,opt,name=DurationMinutes,proto3" json:"DurationMinutes,omitempty"`
}

func (x *GasPaying) Reset() {
	*x = GasPaying{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GasPaying) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GasPaying) ProtoMessage() {}

func (x *GasPaying) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GasPaying.ProtoReflect.Descriptor instead.
func (*GasPaying) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{15}
}

func (x *GasPaying) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GasPaying) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *GasPaying) GetPaymentID() string {
	if x != nil {
		return x.PaymentID
	}
	return ""
}

func (x *GasPaying) GetDurationMinutes() uint32 {
	if x != nil {
		return x.DurationMinutes
	}
	return 0
}

type Compensate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,2610,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderID string `protobuf:"bytes,2611,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Start   uint32 `protobuf:"varint,2612,opt,name=Start,proto3" json:"Start,omitempty"`
	End     uint32 `protobuf:"varint,2613,opt,name=End,proto3" json:"End,omitempty"`
	Message string `protobuf:"bytes,2614,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *Compensate) Reset() {
	*x = Compensate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Compensate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Compensate) ProtoMessage() {}

func (x *Compensate) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Compensate.ProtoReflect.Descriptor instead.
func (*Compensate) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{16}
}

func (x *Compensate) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Compensate) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *Compensate) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Compensate) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Compensate) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type OutOfGas struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID      string `protobuf:"bytes,2610,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderID string `protobuf:"bytes,2611,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Start   uint32 `protobuf:"varint,2612,opt,name=Start,proto3" json:"Start,omitempty"`
	End     uint32 `protobuf:"varint,2613,opt,name=End,proto3" json:"End,omitempty"`
}

func (x *OutOfGas) Reset() {
	*x = OutOfGas{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutOfGas) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutOfGas) ProtoMessage() {}

func (x *OutOfGas) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutOfGas.ProtoReflect.Descriptor instead.
func (*OutOfGas) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{17}
}

func (x *OutOfGas) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OutOfGas) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *OutOfGas) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *OutOfGas) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

type Account struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID         string `protobuf:"bytes,200,opt,name=ID,proto3" json:"ID,omitempty"`
	CoinTypeID string `protobuf:"bytes,201,opt,name=CoinTypeID,proto3" json:"CoinTypeID,omitempty"`
	Address    string `protobuf:"bytes,202,opt,name=Address,proto3" json:"Address,omitempty"`
	AppID      string `protobuf:"bytes,206,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID     string `protobuf:"bytes,207,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *Account) Reset() {
	*x = Account{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Account) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Account) ProtoMessage() {}

func (x *Account) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Account.ProtoReflect.Descriptor instead.
func (*Account) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{18}
}

func (x *Account) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Account) GetCoinTypeID() string {
	if x != nil {
		return x.CoinTypeID
	}
	return ""
}

func (x *Account) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Account) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Account) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    string    `protobuf:"bytes,110,opt,name=ID,proto3" json:"ID,omitempty"`
	OrderID               string    `protobuf:"bytes,111,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	Account               *Account  `protobuf:"bytes,112,opt,name=Account,proto3" json:"Account,omitempty"`
	Amount                float64   `protobuf:"fixed64,113,opt,name=Amount,proto3" json:"Amount,omitempty"`
	CoinInfo              *CoinInfo `protobuf:"bytes,114,opt,name=CoinInfo,proto3" json:"CoinInfo,omitempty"`
	State                 string    `protobuf:"bytes,115,opt,name=State,proto3" json:"State,omitempty"`
	ChainTransactionID    string    `protobuf:"bytes,116,opt,name=ChainTransactionID,proto3" json:"ChainTransactionID,omitempty"`
	PlatformTransactionID string    `protobuf:"bytes,117,opt,name=PlatformTransactionID,proto3" json:"PlatformTransactionID,omitempty"`
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{19}
}

func (x *Payment) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Payment) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *Payment) GetAccount() *Account {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Payment) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Payment) GetCoinInfo() *CoinInfo {
	if x != nil {
		return x.CoinInfo
	}
	return nil
}

func (x *Payment) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Payment) GetChainTransactionID() string {
	if x != nil {
		return x.ChainTransactionID
	}
	return ""
}

func (x *Payment) GetPlatformTransactionID() string {
	if x != nil {
		return x.PlatformTransactionID
	}
	return ""
}

type CouponPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string  `protobuf:"bytes,4600,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID        string  `protobuf:"bytes,4601,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Denomination float64 `protobuf:"fixed64,4603,opt,name=Denomination,proto3" json:"Denomination,omitempty"`
	Start        uint32  `protobuf:"varint,4605,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays int32   `protobuf:"varint,4606,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message      string  `protobuf:"bytes,4607,opt,name=Message,proto3" json:"Message,omitempty"`
	Name         string  `protobuf:"bytes,4608,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *CouponPool) Reset() {
	*x = CouponPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CouponPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CouponPool) ProtoMessage() {}

func (x *CouponPool) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CouponPool.ProtoReflect.Descriptor instead.
func (*CouponPool) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{20}
}

func (x *CouponPool) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *CouponPool) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *CouponPool) GetDenomination() float64 {
	if x != nil {
		return x.Denomination
	}
	return 0
}

func (x *CouponPool) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *CouponPool) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *CouponPool) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CouponPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Coupon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string      `protobuf:"bytes,3600,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID string      `protobuf:"bytes,3601,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID  string      `protobuf:"bytes,3602,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Pool   *CouponPool `protobuf:"bytes,3604,opt,name=Pool,proto3" json:"Pool,omitempty"`
}

func (x *Coupon) Reset() {
	*x = Coupon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Coupon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Coupon) ProtoMessage() {}

func (x *Coupon) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Coupon.ProtoReflect.Descriptor instead.
func (*Coupon) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{21}
}

func (x *Coupon) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Coupon) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Coupon) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Coupon) GetPool() *CouponPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type DiscountPool struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string `protobuf:"bytes,4600,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string `protobuf:"bytes,4601,opt,name=AppID,proto3" json:"AppID,omitempty"`
	ReleaseByUserID string `protobuf:"bytes,4602,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Discount        uint32 `protobuf:"varint,4604,opt,name=Discount,proto3" json:"Discount,omitempty"`
	Start           uint32 `protobuf:"varint,4605,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    int32  `protobuf:"varint,4606,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string `protobuf:"bytes,4607,opt,name=Message,proto3" json:"Message,omitempty"`
	Name            string `protobuf:"bytes,4608,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *DiscountPool) Reset() {
	*x = DiscountPool{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiscountPool) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiscountPool) ProtoMessage() {}

func (x *DiscountPool) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiscountPool.ProtoReflect.Descriptor instead.
func (*DiscountPool) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{22}
}

func (x *DiscountPool) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *DiscountPool) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *DiscountPool) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *DiscountPool) GetDiscount() uint32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *DiscountPool) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *DiscountPool) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *DiscountPool) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *DiscountPool) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Discount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID     string        `protobuf:"bytes,3600,opt,name=ID,proto3" json:"ID,omitempty"`
	UserID string        `protobuf:"bytes,3601,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID  string        `protobuf:"bytes,3602,opt,name=AppID,proto3" json:"AppID,omitempty"`
	Pool   *DiscountPool `protobuf:"bytes,3604,opt,name=Pool,proto3" json:"Pool,omitempty"`
}

func (x *Discount) Reset() {
	*x = Discount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Discount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Discount) ProtoMessage() {}

func (x *Discount) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Discount.ProtoReflect.Descriptor instead.
func (*Discount) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{23}
}

func (x *Discount) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Discount) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Discount) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Discount) GetPool() *DiscountPool {
	if x != nil {
		return x.Pool
	}
	return nil
}

type UserSpecialReduction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID              string  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID           string  `protobuf:"bytes,2,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID          string  `protobuf:"bytes,3,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Amount          float64 `protobuf:"fixed64,4,opt,name=Amount,proto3" json:"Amount,omitempty"`
	ReleaseByUserID string  `protobuf:"bytes,5,opt,name=ReleaseByUserID,proto3" json:"ReleaseByUserID,omitempty"`
	Start           uint32  `protobuf:"varint,6,opt,name=Start,proto3" json:"Start,omitempty"`
	DurationDays    int32   `protobuf:"varint,7,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
	Message         string  `protobuf:"bytes,8,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *UserSpecialReduction) Reset() {
	*x = UserSpecialReduction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSpecialReduction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSpecialReduction) ProtoMessage() {}

func (x *UserSpecialReduction) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSpecialReduction.ProtoReflect.Descriptor instead.
func (*UserSpecialReduction) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{24}
}

func (x *UserSpecialReduction) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *UserSpecialReduction) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *UserSpecialReduction) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UserSpecialReduction) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *UserSpecialReduction) GetReleaseByUserID() string {
	if x != nil {
		return x.ReleaseByUserID
	}
	return ""
}

func (x *UserSpecialReduction) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UserSpecialReduction) GetDurationDays() int32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

func (x *UserSpecialReduction) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type GoodFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	AppID          string `protobuf:"bytes,3,opt,name=AppID,proto3" json:"AppID,omitempty"`
	FeeType        string `protobuf:"bytes,4,opt,name=FeeType,proto3" json:"FeeType,omitempty"`
	FeeDescription string `protobuf:"bytes,5,opt,name=FeeDescription,proto3" json:"FeeDescription,omitempty"`
	PayType        string `protobuf:"bytes,6,opt,name=PayType,proto3" json:"PayType,omitempty"`
}

func (x *GoodFee) Reset() {
	*x = GoodFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoodFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoodFee) ProtoMessage() {}

func (x *GoodFee) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoodFee.ProtoReflect.Descriptor instead.
func (*GoodFee) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{25}
}

func (x *GoodFee) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *GoodFee) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GoodFee) GetFeeType() string {
	if x != nil {
		return x.FeeType
	}
	return ""
}

func (x *GoodFee) GetFeeDescription() string {
	if x != nil {
		return x.FeeDescription
	}
	return ""
}

func (x *GoodFee) GetPayType() string {
	if x != nil {
		return x.PayType
	}
	return ""
}

type Fee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fee   *GoodFee `protobuf:"bytes,1,opt,name=Fee,proto3" json:"Fee,omitempty"`
	Value float64  `protobuf:"fixed64,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Fee) Reset() {
	*x = Fee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fee) ProtoMessage() {}

func (x *Fee) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fee.ProtoReflect.Descriptor instead.
func (*Fee) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{26}
}

func (x *Fee) GetFee() *GoodFee {
	if x != nil {
		return x.Fee
	}
	return nil
}

func (x *Fee) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type OrderDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string                `protobuf:"bytes,2700,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID                 string                `protobuf:"bytes,2701,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	AppID                  string                `protobuf:"bytes,2702,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID                 string                `protobuf:"bytes,2703,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Units                  uint32                `protobuf:"varint,2704,opt,name=Units,proto3" json:"Units,omitempty"`
	DiscountCoupon         *Discount             `protobuf:"bytes,2705,opt,name=DiscountCoupon,proto3" json:"DiscountCoupon,omitempty"`
	UserSpecialReduction   *UserSpecialReduction `protobuf:"bytes,2706,opt,name=UserSpecialReduction,proto3" json:"UserSpecialReduction,omitempty"`
	GoodPaying             *GoodPaying           `protobuf:"bytes,2708,opt,name=GoodPaying,proto3" json:"GoodPaying,omitempty"`
	GasPayings             []*GasPaying          `protobuf:"bytes,2709,rep,name=GasPayings,proto3" json:"GasPayings,omitempty"`
	Compensates            []*Compensate         `protobuf:"bytes,2710,rep,name=Compensates,proto3" json:"Compensates,omitempty"`
	OutOfGases             []*OutOfGas           `protobuf:"bytes,2711,rep,name=OutOfGases,proto3" json:"OutOfGases,omitempty"`
	Payment                *Payment              `protobuf:"bytes,2712,opt,name=Payment,proto3" json:"Payment,omitempty"`
	Start                  uint32                `protobuf:"varint,2713,opt,name=Start,proto3" json:"Start,omitempty"`
	End                    uint32                `protobuf:"varint,2714,opt,name=End,proto3" json:"End,omitempty"`
	Coupon                 *Coupon               `protobuf:"bytes,2715,opt,name=Coupon,proto3" json:"Coupon,omitempty"`
	Discount               uint32                `protobuf:"varint,2716,opt,name=Discount,proto3" json:"Discount,omitempty"`
	SpecialReductionAmount float64               `protobuf:"fixed64,2717,opt,name=SpecialReductionAmount,proto3" json:"SpecialReductionAmount,omitempty"`
}

func (x *OrderDetail) Reset() {
	*x = OrderDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderDetail) ProtoMessage() {}

func (x *OrderDetail) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderDetail.ProtoReflect.Descriptor instead.
func (*OrderDetail) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{27}
}

func (x *OrderDetail) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OrderDetail) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *OrderDetail) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *OrderDetail) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OrderDetail) GetUnits() uint32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *OrderDetail) GetDiscountCoupon() *Discount {
	if x != nil {
		return x.DiscountCoupon
	}
	return nil
}

func (x *OrderDetail) GetUserSpecialReduction() *UserSpecialReduction {
	if x != nil {
		return x.UserSpecialReduction
	}
	return nil
}

func (x *OrderDetail) GetGoodPaying() *GoodPaying {
	if x != nil {
		return x.GoodPaying
	}
	return nil
}

func (x *OrderDetail) GetGasPayings() []*GasPaying {
	if x != nil {
		return x.GasPayings
	}
	return nil
}

func (x *OrderDetail) GetCompensates() []*Compensate {
	if x != nil {
		return x.Compensates
	}
	return nil
}

func (x *OrderDetail) GetOutOfGases() []*OutOfGas {
	if x != nil {
		return x.OutOfGases
	}
	return nil
}

func (x *OrderDetail) GetPayment() *Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *OrderDetail) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *OrderDetail) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *OrderDetail) GetCoupon() *Coupon {
	if x != nil {
		return x.Coupon
	}
	return nil
}

func (x *OrderDetail) GetDiscount() uint32 {
	if x != nil {
		return x.Discount
	}
	return 0
}

func (x *OrderDetail) GetSpecialReductionAmount() float64 {
	if x != nil {
		return x.SpecialReductionAmount
	}
	return 0
}

type GetOrderDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,2800,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *GetOrderDetailRequest) Reset() {
	*x = GetOrderDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderDetailRequest) ProtoMessage() {}

func (x *GetOrderDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderDetailRequest.ProtoReflect.Descriptor instead.
func (*GetOrderDetailRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{28}
}

func (x *GetOrderDetailRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type GetOrderDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Detail *OrderDetail `protobuf:"bytes,2900,opt,name=Detail,proto3" json:"Detail,omitempty"`
}

func (x *GetOrderDetailResponse) Reset() {
	*x = GetOrderDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrderDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrderDetailResponse) ProtoMessage() {}

func (x *GetOrderDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrderDetailResponse.ProtoReflect.Descriptor instead.
func (*GetOrderDetailResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{29}
}

func (x *GetOrderDetailResponse) GetDetail() *OrderDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type GetOrdersDetailByAppUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID  string `protobuf:"bytes,3000,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID string `protobuf:"bytes,3001,opt,name=UserID,proto3" json:"UserID,omitempty"`
}

func (x *GetOrdersDetailByAppUserRequest) Reset() {
	*x = GetOrdersDetailByAppUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersDetailByAppUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersDetailByAppUserRequest) ProtoMessage() {}

func (x *GetOrdersDetailByAppUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersDetailByAppUserRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersDetailByAppUserRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{30}
}

func (x *GetOrdersDetailByAppUserRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *GetOrdersDetailByAppUserRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type GetOrdersDetailByAppUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*OrderDetail `protobuf:"bytes,3100,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *GetOrdersDetailByAppUserResponse) Reset() {
	*x = GetOrdersDetailByAppUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersDetailByAppUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersDetailByAppUserResponse) ProtoMessage() {}

func (x *GetOrdersDetailByAppUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersDetailByAppUserResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersDetailByAppUserResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{31}
}

func (x *GetOrdersDetailByAppUserResponse) GetDetails() []*OrderDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetOrdersDetailByAppRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppID string `protobuf:"bytes,3200,opt,name=AppID,proto3" json:"AppID,omitempty"`
}

func (x *GetOrdersDetailByAppRequest) Reset() {
	*x = GetOrdersDetailByAppRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersDetailByAppRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersDetailByAppRequest) ProtoMessage() {}

func (x *GetOrdersDetailByAppRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersDetailByAppRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersDetailByAppRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{32}
}

func (x *GetOrdersDetailByAppRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

type GetOrdersDetailByAppResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*OrderDetail `protobuf:"bytes,3300,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *GetOrdersDetailByAppResponse) Reset() {
	*x = GetOrdersDetailByAppResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersDetailByAppResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersDetailByAppResponse) ProtoMessage() {}

func (x *GetOrdersDetailByAppResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersDetailByAppResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersDetailByAppResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{33}
}

func (x *GetOrdersDetailByAppResponse) GetDetails() []*OrderDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type GetOrdersDetailByGoodRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID string `protobuf:"bytes,3400,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
}

func (x *GetOrdersDetailByGoodRequest) Reset() {
	*x = GetOrdersDetailByGoodRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersDetailByGoodRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersDetailByGoodRequest) ProtoMessage() {}

func (x *GetOrdersDetailByGoodRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersDetailByGoodRequest.ProtoReflect.Descriptor instead.
func (*GetOrdersDetailByGoodRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{34}
}

func (x *GetOrdersDetailByGoodRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

type GetOrdersDetailByGoodResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details []*OrderDetail `protobuf:"bytes,3500,rep,name=Details,proto3" json:"Details,omitempty"`
}

func (x *GetOrdersDetailByGoodResponse) Reset() {
	*x = GetOrdersDetailByGoodResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetOrdersDetailByGoodResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetOrdersDetailByGoodResponse) ProtoMessage() {}

func (x *GetOrdersDetailByGoodResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetOrdersDetailByGoodResponse.ProtoReflect.Descriptor instead.
func (*GetOrdersDetailByGoodResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{35}
}

func (x *GetOrdersDetailByGoodResponse) GetDetails() []*OrderDetail {
	if x != nil {
		return x.Details
	}
	return nil
}

type OrderFee struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           string `protobuf:"bytes,3510,opt,name=ID,proto3" json:"ID,omitempty"`
	DurationDays uint32 `protobuf:"varint,3503,opt,name=DurationDays,proto3" json:"DurationDays,omitempty"`
}

func (x *OrderFee) Reset() {
	*x = OrderFee{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderFee) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderFee) ProtoMessage() {}

func (x *OrderFee) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderFee.ProtoReflect.Descriptor instead.
func (*OrderFee) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{36}
}

func (x *OrderFee) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *OrderFee) GetDurationDays() uint32 {
	if x != nil {
		return x.DurationDays
	}
	return 0
}

type SubmitOrderRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GoodID                 string `protobuf:"bytes,3600,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	Units                  uint32 `protobuf:"varint,3601,opt,name=Units,proto3" json:"Units,omitempty"`
	UserID                 string `protobuf:"bytes,3602,opt,name=UserID,proto3" json:"UserID,omitempty"`
	AppID                  string `protobuf:"bytes,3603,opt,name=AppID,proto3" json:"AppID,omitempty"`
	CouponID               string `protobuf:"bytes,3606,opt,name=CouponID,proto3" json:"CouponID,omitempty"`
	DiscountCouponID       string `protobuf:"bytes,3607,opt,name=DiscountCouponID,proto3" json:"DiscountCouponID,omitempty"`
	UserSpecialReductionID string `protobuf:"bytes,3608,opt,name=UserSpecialReductionID,proto3" json:"UserSpecialReductionID,omitempty"`
}

func (x *SubmitOrderRequest) Reset() {
	*x = SubmitOrderRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOrderRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderRequest) ProtoMessage() {}

func (x *SubmitOrderRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderRequest.ProtoReflect.Descriptor instead.
func (*SubmitOrderRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{37}
}

func (x *SubmitOrderRequest) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *SubmitOrderRequest) GetUnits() uint32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *SubmitOrderRequest) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *SubmitOrderRequest) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *SubmitOrderRequest) GetCouponID() string {
	if x != nil {
		return x.CouponID
	}
	return ""
}

func (x *SubmitOrderRequest) GetDiscountCouponID() string {
	if x != nil {
		return x.DiscountCouponID
	}
	return ""
}

func (x *SubmitOrderRequest) GetUserSpecialReductionID() string {
	if x != nil {
		return x.UserSpecialReductionID
	}
	return ""
}

type Order struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                     string `protobuf:"bytes,1400,opt,name=ID,proto3" json:"ID,omitempty"`
	GoodID                 string `protobuf:"bytes,1401,opt,name=GoodID,proto3" json:"GoodID,omitempty"`
	AppID                  string `protobuf:"bytes,1402,opt,name=AppID,proto3" json:"AppID,omitempty"`
	UserID                 string `protobuf:"bytes,1403,opt,name=UserID,proto3" json:"UserID,omitempty"`
	Units                  uint32 `protobuf:"varint,1404,opt,name=Units,proto3" json:"Units,omitempty"`
	DiscountCouponID       string `protobuf:"bytes,1405,opt,name=DiscountCouponID,proto3" json:"DiscountCouponID,omitempty"`
	UserSpecialReductionID string `protobuf:"bytes,1406,opt,name=UserSpecialReductionID,proto3" json:"UserSpecialReductionID,omitempty"`
	Start                  uint32 `protobuf:"varint,1407,opt,name=Start,proto3" json:"Start,omitempty"`
	End                    uint32 `protobuf:"varint,1408,opt,name=End,proto3" json:"End,omitempty"`
	CouponID               string `protobuf:"bytes,1409,opt,name=CouponID,proto3" json:"CouponID,omitempty"`
}

func (x *Order) Reset() {
	*x = Order{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Order) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Order) ProtoMessage() {}

func (x *Order) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Order.ProtoReflect.Descriptor instead.
func (*Order) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{38}
}

func (x *Order) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Order) GetGoodID() string {
	if x != nil {
		return x.GoodID
	}
	return ""
}

func (x *Order) GetAppID() string {
	if x != nil {
		return x.AppID
	}
	return ""
}

func (x *Order) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Order) GetUnits() uint32 {
	if x != nil {
		return x.Units
	}
	return 0
}

func (x *Order) GetDiscountCouponID() string {
	if x != nil {
		return x.DiscountCouponID
	}
	return ""
}

func (x *Order) GetUserSpecialReductionID() string {
	if x != nil {
		return x.UserSpecialReductionID
	}
	return ""
}

func (x *Order) GetStart() uint32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *Order) GetEnd() uint32 {
	if x != nil {
		return x.End
	}
	return 0
}

func (x *Order) GetCouponID() string {
	if x != nil {
		return x.CouponID
	}
	return ""
}

type SubmitOrderResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *Order `protobuf:"bytes,3700,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *SubmitOrderResponse) Reset() {
	*x = SubmitOrderResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitOrderResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitOrderResponse) ProtoMessage() {}

func (x *SubmitOrderResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitOrderResponse.ProtoReflect.Descriptor instead.
func (*SubmitOrderResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{39}
}

func (x *SubmitOrderResponse) GetInfo() *Order {
	if x != nil {
		return x.Info
	}
	return nil
}

type CreateOrderPaymentRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderID           string      `protobuf:"bytes,1,opt,name=OrderID,proto3" json:"OrderID,omitempty"`
	PaymentCoinTypeID string      `protobuf:"bytes,2,opt,name=PaymentCoinTypeID,proto3" json:"PaymentCoinTypeID,omitempty"`
	Fees              []*OrderFee `protobuf:"bytes,3,rep,name=Fees,proto3" json:"Fees,omitempty"`
}

func (x *CreateOrderPaymentRequest) Reset() {
	*x = CreateOrderPaymentRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPaymentRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPaymentRequest) ProtoMessage() {}

func (x *CreateOrderPaymentRequest) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPaymentRequest.ProtoReflect.Descriptor instead.
func (*CreateOrderPaymentRequest) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{40}
}

func (x *CreateOrderPaymentRequest) GetOrderID() string {
	if x != nil {
		return x.OrderID
	}
	return ""
}

func (x *CreateOrderPaymentRequest) GetPaymentCoinTypeID() string {
	if x != nil {
		return x.PaymentCoinTypeID
	}
	return ""
}

func (x *CreateOrderPaymentRequest) GetFees() []*OrderFee {
	if x != nil {
		return x.Fees
	}
	return nil
}

type CreateOrderPaymentResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info *OrderDetail `protobuf:"bytes,1,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *CreateOrderPaymentResponse) Reset() {
	*x = CreateOrderPaymentResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_npool_cloud_hashing_apis_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateOrderPaymentResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateOrderPaymentResponse) ProtoMessage() {}

func (x *CreateOrderPaymentResponse) ProtoReflect() protoreflect.Message {
	mi := &file_npool_cloud_hashing_apis_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateOrderPaymentResponse.ProtoReflect.Descriptor instead.
func (*CreateOrderPaymentResponse) Descriptor() ([]byte, []int) {
	return file_npool_cloud_hashing_apis_proto_rawDescGZIP(), []int{41}
}

func (x *CreateOrderPaymentResponse) GetInfo() *OrderDetail {
	if x != nil {
		return x.Info
	}
	return nil
}

var File_npool_cloud_hashing_apis_proto protoreflect.FileDescriptor

var file_npool_cloud_hashing_apis_proto_rawDesc = []byte{
	0x0a, 0x1e, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x15, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x44, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x64, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x1a, 0x0a, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x26, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f,
	0x22, 0x8d, 0x01, 0x0a, 0x12, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xac, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0xad, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x1b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0xae, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65,
	0x12, 0x13, 0x0a, 0x04, 0x43, 0x69, 0x74, 0x79, 0x18, 0xaf, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x43, 0x69, 0x74, 0x79, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0xb0, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x22, 0x5b, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x65, 0x61, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74,
	0x18, 0xe9, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65,
	0x6e, 0x74, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0xea, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0xa3, 0x01,
	0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0xa4, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x13, 0x0a,
	0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0xa5, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x72, 0x18, 0xa6, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xa7, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x73, 0x75, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x74,
	0x18, 0xa8, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x53, 0x68, 0x69, 0x70, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x74, 0x22, 0xe7, 0x04, 0x0a, 0x08, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe0, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x49,
	0x44, 0x18, 0xe1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x21, 0x0a, 0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61,
	0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0xe3, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65,
	0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe4, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55,
	0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0xe5, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x18, 0xe6, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x49, 0x44, 0x12, 0x19,
	0x0a, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x18, 0xe7, 0x12, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a, 0x0a, 0x44, 0x65, 0x6c,
	0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xe8, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x2d, 0x0a, 0x11, 0x49, 0x6e,
	0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0xe9, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46,
	0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x56, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xea, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18,
	0xeb, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a,
	0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0xec, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x19, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x18, 0xed, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x12, 0x53,
	0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x73, 0x18, 0xee, 0x12, 0x20, 0x03, 0x28, 0x09, 0x52, 0x12, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72,
	0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x73, 0x12, 0x15, 0x0a, 0x05,
	0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0xef, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x12, 0x25, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x63, 0x79, 0x18, 0xf0, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0xf1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x69, 0x74, 0x6c,
	0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xf2, 0x12, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18,
	0xf3, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x22, 0x63, 0x0a,
	0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xc2, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0xc3, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xc4, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x53, 0x79, 0x6d,
	0x62, 0x6f, 0x6c, 0x18, 0xc5, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x22, 0x75, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0xcc, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x19, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x18, 0xcd, 0x17, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0xce, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xcf, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x6e, 0x69, 0x74, 0x12, 0x13, 0x0a, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x18, 0xd0, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x4c, 0x6f, 0x67, 0x6f, 0x22, 0x92, 0x07, 0x0a, 0x0a, 0x47, 0x6f,
	0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xe0,
	0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0a, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0xe1, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x21, 0x0a,
	0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65, 0x18, 0xe3, 0x12, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x65, 0x46, 0x65, 0x65,
	0x12, 0x1d, 0x0a, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0xe4, 0x12,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12,
	0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18,
	0xe5, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0xe6, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x18, 0xe7, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x41, 0x63, 0x74, 0x75, 0x61, 0x6c, 0x73, 0x12, 0x1f, 0x0a,
	0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x18, 0xe8, 0x12, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x41, 0x74, 0x12, 0x4a,
	0x0a, 0x0f, 0x49, 0x6e, 0x68, 0x65, 0x72, 0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f,
	0x64, 0x18, 0xe9, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x49, 0x6e, 0x68, 0x65, 0x72,
	0x69, 0x74, 0x46, 0x72, 0x6f, 0x6d, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x52, 0x0a, 0x0e, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0xea, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15,
	0x0a, 0x05, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0xeb, 0x12, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x42, 0x65, 0x6e, 0x65, 0x66, 0x69, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x18, 0xec, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42, 0x65, 0x6e,
	0x65, 0x66, 0x69, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x18, 0xed, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x69, 0x63, 0x12, 0x44, 0x0a, 0x0c, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f,
	0x69, 0x6e, 0x73, 0x18, 0xee, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x75, 0x70,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x73, 0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x18, 0xef, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x3b, 0x0a, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x18, 0xf0, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x45, 0x78, 0x74, 0x72, 0x61, 0x12, 0x15, 0x0a,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0xf1, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54,
	0x69, 0x74, 0x6c, 0x65, 0x12, 0x13, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0xf2, 0x12, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xf3, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x4b, 0x0a, 0x0d, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x18, 0xf4, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x52, 0x0d,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2f, 0x0a,
	0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0xf5, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x65, 0x52, 0x04, 0x46, 0x65, 0x65, 0x73, 0x22, 0x26,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x52, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x39, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x6c, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x8a, 0x19, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x08, 0x50, 0x61,
	0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x8b, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08,
	0x50, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x6d, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x8c, 0x19,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f,
	0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73,
	0x12, 0x15, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x8d, 0x19, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xdb, 0x01, 0x0a, 0x0d, 0x47, 0x6f, 0x6f, 0x64,
	0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0xec, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f,
	0x6f, 0x64, 0x49, 0x44, 0x18, 0xed, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0xee,
	0x27, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x50, 0x6f, 0x73, 0x74, 0x65, 0x72, 0x73, 0x12, 0x17,
	0x0a, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0xef, 0x27, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x75, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x18, 0xf0, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x4f, 0x75, 0x74, 0x53, 0x61,
	0x6c, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x18, 0xf1, 0x27,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x50, 0x72, 0x65, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1d, 0x0a,
	0x09, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xf2, 0x27, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x06,
	0x52, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0xf3, 0x27, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x52,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x57, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18,
	0xc9, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1d, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x22, 0x81,
	0x01, 0x0a, 0x09, 0x47, 0x61, 0x73, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x0f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0xbc, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x19, 0x0a,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0xbd, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x09, 0x50, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x49, 0x44, 0x18, 0xbe, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74, 0x65, 0x73, 0x18, 0xbf, 0x05, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0f, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6e, 0x75, 0x74,
	0x65, 0x73, 0x22, 0x7d, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xb2, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x19, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0xb3, 0x14, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0xb4, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0xb5, 0x14, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xb6, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x60, 0x0a, 0x08, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x12, 0x0f, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0xb2, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x19,
	0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x18, 0xb3, 0x14, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xb4, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x11, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0xb5, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x45, 0x6e, 0x64, 0x22, 0x86, 0x01, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xc8, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1f, 0x0a, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0xc9,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x44, 0x12, 0x19, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0xca, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x15, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xce, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xcf, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0xbe, 0x02, 0x0a,
	0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x6f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x38, 0x0a, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x07, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x71, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3b, 0x0a, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f,
	0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x43, 0x6f, 0x69, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x73, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x74, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44,
	0x18, 0x75, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xc5, 0x01,
	0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0f, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0xf8, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xf9, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x65, 0x6e, 0x6f, 0x6d, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0xfb, 0x23, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x44, 0x65, 0x6e,
	0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xfd, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73,
	0x18, 0xfe, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0xff, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x80, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x81, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x90, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x91, 0x1c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x18, 0x92, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49,
	0x44, 0x12, 0x36, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x94, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x50,
	0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xea, 0x01, 0x0a, 0x0c, 0x44, 0x69,
	0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0xf8, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0xf9, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x29, 0x0a, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xfa, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1b, 0x0a,
	0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0xfc, 0x23, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0xfd, 0x23, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x18, 0xfe, 0x23, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x12, 0x19, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0xff, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x13, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x80, 0x24, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x01, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x90, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x91,
	0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x92, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x12, 0x38, 0x0a, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x18, 0x94, 0x1c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x50, 0x6f, 0x6f, 0x6c, 0x52, 0x04, 0x50, 0x6f, 0x6f, 0x6c, 0x22, 0xea,
	0x01, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x16, 0x0a,
	0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a,
	0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x42,
	0x79, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x8b, 0x01, 0x0a, 0x07,
	0x47, 0x6f, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x46, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x65, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x46, 0x65, 0x65, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x50, 0x61, 0x79, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4d, 0x0a, 0x03, 0x46, 0x65, 0x65,
	0x12, 0x30, 0x0a, 0x03, 0x46, 0x65, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x46, 0x65, 0x65, 0x52, 0x03, 0x46,
	0x65, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xac, 0x06, 0x0a, 0x0b, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x8c,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f,
	0x64, 0x49, 0x44, 0x18, 0x8d, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64,
	0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x8e, 0x15, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x8f, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x90, 0x15, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x0e, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x18, 0x91, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x0e, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x14, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69,
	0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x92, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x14, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0a, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x79,
	0x69, 0x6e, 0x67, 0x18, 0x94, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x6f, 0x6f, 0x64, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x47,
	0x6f, 0x6f, 0x64, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x61, 0x73,
	0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x95, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x73, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67,
	0x52, 0x0a, 0x47, 0x61, 0x73, 0x50, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x44, 0x0a, 0x0b,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74, 0x65, 0x73, 0x18, 0x96, 0x15, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69,
	0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65,
	0x6e, 0x73, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x6e, 0x73, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x40, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x97, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47, 0x61, 0x73, 0x52, 0x0a, 0x4f, 0x75, 0x74, 0x4f, 0x66, 0x47,
	0x61, 0x73, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x98, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x15, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x99, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x11, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x9a, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x45, 0x6e, 0x64, 0x12, 0x36, 0x0a, 0x06, 0x43, 0x6f, 0x75,
	0x70, 0x6f, 0x6e, 0x18, 0x9b, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x52, 0x06, 0x43, 0x6f, 0x75, 0x70, 0x6f,
	0x6e, 0x12, 0x1b, 0x0a, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9c, 0x15,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x37,
	0x0a, 0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x9d, 0x15, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x16, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x28, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xf0, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x22, 0x55, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a, 0x06, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0xd4, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x06, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x51, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x18, 0xb8, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70, 0x70,
	0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xb9, 0x17, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x22, 0x61, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79,
	0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3d, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x9c, 0x18, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x34,
	0x0a, 0x1b, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a,
	0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x80, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41,
	0x70, 0x70, 0x49, 0x44, 0x22, 0x5d, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0xe4, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x22, 0x37, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xc8, 0x1a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x22, 0x5e, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a,
	0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0xac, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x07, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x40, 0x0a, 0x08,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xb6,
	0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x23, 0x0a, 0x0c, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x18, 0xaf, 0x1b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0c, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x79, 0x73, 0x22, 0xf7,
	0x01, 0x0a, 0x12, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18,
	0x90, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x15,
	0x0a, 0x05, 0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x91, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x92, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15,
	0x0a, 0x05, 0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0x93, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49,
	0x44, 0x18, 0x96, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e,
	0x49, 0x44, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x97, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x12,
	0x37, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0x98, 0x1c, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65, 0x64,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x22, 0xa5, 0x02, 0x0a, 0x05, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x0f, 0x0a, 0x02, 0x49, 0x44, 0x18, 0xf8, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x18, 0xf9, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x47, 0x6f, 0x6f, 0x64, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05,
	0x41, 0x70, 0x70, 0x49, 0x44, 0x18, 0xfa, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x70,
	0x70, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0xfb, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05,
	0x55, 0x6e, 0x69, 0x74, 0x73, 0x18, 0xfc, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x55, 0x6e,
	0x69, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x10, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43,
	0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xfd, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44,
	0x12, 0x37, 0x0a, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52,
	0x65, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x18, 0xfe, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x16, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x52, 0x65,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x12, 0x15, 0x0a, 0x05, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x18, 0xff, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x12, 0x11, 0x0a, 0x03, 0x45, 0x6e, 0x64, 0x18, 0x80, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03,
	0x45, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44, 0x18,
	0x81, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x6f, 0x75, 0x70, 0x6f, 0x6e, 0x49, 0x44,
	0x22, 0x48, 0x0a, 0x13, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18,
	0xf4, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x98, 0x01, 0x0a, 0x19, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x49, 0x44, 0x12, 0x2c, 0x0a, 0x11, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x44,
	0x12, 0x33, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x46, 0x65, 0x65, 0x52,
	0x04, 0x46, 0x65, 0x65, 0x73, 0x22, 0x54, 0x0a, 0x1a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x32, 0xdc, 0x0a, 0x0a, 0x10,
	0x43, 0x6c, 0x6f, 0x75, 0x64, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x41, 0x70, 0x69, 0x73,
	0x12, 0x5e, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x26, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x0d, 0x22, 0x08, 0x2f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x01, 0x2a,
	0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f,
	0x64, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01,
	0x2a, 0x12, 0x8a, 0x01, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x12, 0x2b, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47,
	0x6f, 0x6f, 0x64, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67,
	0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x47, 0x6f, 0x6f, 0x64,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1e,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x22, 0x13, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65, 0x74, 0x2f,
	0x67, 0x6f, 0x6f, 0x64, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x3a, 0x01, 0x2a, 0x12, 0x81,
	0x01, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x29,
	0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x22, 0x10, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x3a,
	0x01, 0x2a, 0x12, 0x9e, 0x01, 0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x23,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x22, 0x18, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x3a, 0x01, 0x2a, 0x12, 0x8e, 0x01, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x2c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47,
	0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x2d, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x22, 0x14, 0x2f, 0x76, 0x31,
	0x2f, 0x67, 0x65, 0x74, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x3a, 0x01, 0x2a, 0x12, 0xb9, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x36, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e,
	0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x37, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x22, 0x21, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x3a, 0x01, 0x2a,
	0x12, 0xa8, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x12, 0x32, 0x2e, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x33, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70,
	0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x41, 0x70, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x22, 0x1c, 0x2f, 0x76, 0x31, 0x2f,
	0x67, 0x65, 0x74, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x2f, 0x62, 0x79, 0x2f, 0x61, 0x70, 0x70, 0x3a, 0x01, 0x2a, 0x12, 0xac, 0x01, 0x0a, 0x15,
	0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42,
	0x79, 0x47, 0x6f, 0x6f, 0x64, 0x12, 0x33, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65,
	0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x42, 0x79, 0x47,
	0x6f, 0x6f, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x42, 0x79, 0x47, 0x6f, 0x6f, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x22, 0x1d, 0x2f, 0x76, 0x31, 0x2f, 0x67, 0x65,
	0x74, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x2f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x2f,
	0x62, 0x79, 0x2f, 0x67, 0x6f, 0x6f, 0x64, 0x3a, 0x01, 0x2a, 0x42, 0x3b, 0x5a, 0x39, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x70, 0x6f, 0x6f, 0x6c, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2d, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x6e, 0x67, 0x2d, 0x61, 0x70, 0x69, 0x73, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x2f, 0x6e, 0x70, 0x6f, 0x6f, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_npool_cloud_hashing_apis_proto_rawDescOnce sync.Once
	file_npool_cloud_hashing_apis_proto_rawDescData = file_npool_cloud_hashing_apis_proto_rawDesc
)

func file_npool_cloud_hashing_apis_proto_rawDescGZIP() []byte {
	file_npool_cloud_hashing_apis_proto_rawDescOnce.Do(func() {
		file_npool_cloud_hashing_apis_proto_rawDescData = protoimpl.X.CompressGZIP(file_npool_cloud_hashing_apis_proto_rawDescData)
	})
	return file_npool_cloud_hashing_apis_proto_rawDescData
}

var file_npool_cloud_hashing_apis_proto_msgTypes = make([]protoimpl.MessageInfo, 42)
var file_npool_cloud_hashing_apis_proto_goTypes = []interface{}{
	(*PageInfo)(nil),                         // 0: cloud.hashing.apis.v1.PageInfo
	(*VersionResponse)(nil),                  // 1: cloud.hashing.apis.v1.VersionResponse
	(*VendorLocationInfo)(nil),               // 2: cloud.hashing.apis.v1.VendorLocationInfo
	(*TargetAreaInfo)(nil),                   // 3: cloud.hashing.apis.v1.TargetAreaInfo
	(*DeviceInfo)(nil),                       // 4: cloud.hashing.apis.v1.DeviceInfo
	(*GoodInfo)(nil),                         // 5: cloud.hashing.apis.v1.GoodInfo
	(*PriceCurrency)(nil),                    // 6: cloud.hashing.apis.v1.PriceCurrency
	(*CoinInfo)(nil),                         // 7: cloud.hashing.apis.v1.CoinInfo
	(*GoodDetail)(nil),                       // 8: cloud.hashing.apis.v1.GoodDetail
	(*GetGoodDetailRequest)(nil),             // 9: cloud.hashing.apis.v1.GetGoodDetailRequest
	(*GetGoodDetailResponse)(nil),            // 10: cloud.hashing.apis.v1.GetGoodDetailResponse
	(*GetGoodsDetailRequest)(nil),            // 11: cloud.hashing.apis.v1.GetGoodsDetailRequest
	(*GetGoodsDetailResponse)(nil),           // 12: cloud.hashing.apis.v1.GetGoodsDetailResponse
	(*GoodExtraInfo)(nil),                    // 13: cloud.hashing.apis.v1.GoodExtraInfo
	(*GoodPaying)(nil),                       // 14: cloud.hashing.apis.v1.GoodPaying
	(*GasPaying)(nil),                        // 15: cloud.hashing.apis.v1.GasPaying
	(*Compensate)(nil),                       // 16: cloud.hashing.apis.v1.Compensate
	(*OutOfGas)(nil),                         // 17: cloud.hashing.apis.v1.OutOfGas
	(*Account)(nil),                          // 18: cloud.hashing.apis.v1.Account
	(*Payment)(nil),                          // 19: cloud.hashing.apis.v1.Payment
	(*CouponPool)(nil),                       // 20: cloud.hashing.apis.v1.CouponPool
	(*Coupon)(nil),                           // 21: cloud.hashing.apis.v1.Coupon
	(*DiscountPool)(nil),                     // 22: cloud.hashing.apis.v1.DiscountPool
	(*Discount)(nil),                         // 23: cloud.hashing.apis.v1.Discount
	(*UserSpecialReduction)(nil),             // 24: cloud.hashing.apis.v1.UserSpecialReduction
	(*GoodFee)(nil),                          // 25: cloud.hashing.apis.v1.GoodFee
	(*Fee)(nil),                              // 26: cloud.hashing.apis.v1.Fee
	(*OrderDetail)(nil),                      // 27: cloud.hashing.apis.v1.OrderDetail
	(*GetOrderDetailRequest)(nil),            // 28: cloud.hashing.apis.v1.GetOrderDetailRequest
	(*GetOrderDetailResponse)(nil),           // 29: cloud.hashing.apis.v1.GetOrderDetailResponse
	(*GetOrdersDetailByAppUserRequest)(nil),  // 30: cloud.hashing.apis.v1.GetOrdersDetailByAppUserRequest
	(*GetOrdersDetailByAppUserResponse)(nil), // 31: cloud.hashing.apis.v1.GetOrdersDetailByAppUserResponse
	(*GetOrdersDetailByAppRequest)(nil),      // 32: cloud.hashing.apis.v1.GetOrdersDetailByAppRequest
	(*GetOrdersDetailByAppResponse)(nil),     // 33: cloud.hashing.apis.v1.GetOrdersDetailByAppResponse
	(*GetOrdersDetailByGoodRequest)(nil),     // 34: cloud.hashing.apis.v1.GetOrdersDetailByGoodRequest
	(*GetOrdersDetailByGoodResponse)(nil),    // 35: cloud.hashing.apis.v1.GetOrdersDetailByGoodResponse
	(*OrderFee)(nil),                         // 36: cloud.hashing.apis.v1.OrderFee
	(*SubmitOrderRequest)(nil),               // 37: cloud.hashing.apis.v1.SubmitOrderRequest
	(*Order)(nil),                            // 38: cloud.hashing.apis.v1.Order
	(*SubmitOrderResponse)(nil),              // 39: cloud.hashing.apis.v1.SubmitOrderResponse
	(*CreateOrderPaymentRequest)(nil),        // 40: cloud.hashing.apis.v1.CreateOrderPaymentRequest
	(*CreateOrderPaymentResponse)(nil),       // 41: cloud.hashing.apis.v1.CreateOrderPaymentResponse
	(*emptypb.Empty)(nil),                    // 42: google.protobuf.Empty
}
var file_npool_cloud_hashing_apis_proto_depIdxs = []int32{
	4,  // 0: cloud.hashing.apis.v1.GoodDetail.DeviceInfo:type_name -> cloud.hashing.apis.v1.DeviceInfo
	7,  // 1: cloud.hashing.apis.v1.GoodDetail.CoinInfo:type_name -> cloud.hashing.apis.v1.CoinInfo
	5,  // 2: cloud.hashing.apis.v1.GoodDetail.InheritFromGood:type_name -> cloud.hashing.apis.v1.GoodInfo
	2,  // 3: cloud.hashing.apis.v1.GoodDetail.VendorLocation:type_name -> cloud.hashing.apis.v1.VendorLocationInfo
	7,  // 4: cloud.hashing.apis.v1.GoodDetail.SupportCoins:type_name -> cloud.hashing.apis.v1.CoinInfo
	13, // 5: cloud.hashing.apis.v1.GoodDetail.Extra:type_name -> cloud.hashing.apis.v1.GoodExtraInfo
	6,  // 6: cloud.hashing.apis.v1.GoodDetail.PriceCurrency:type_name -> cloud.hashing.apis.v1.PriceCurrency
	26, // 7: cloud.hashing.apis.v1.GoodDetail.Fees:type_name -> cloud.hashing.apis.v1.Fee
	8,  // 8: cloud.hashing.apis.v1.GetGoodDetailResponse.Detail:type_name -> cloud.hashing.apis.v1.GoodDetail
	0,  // 9: cloud.hashing.apis.v1.GetGoodsDetailRequest.PageInfo:type_name -> cloud.hashing.apis.v1.PageInfo
	8,  // 10: cloud.hashing.apis.v1.GetGoodsDetailResponse.Details:type_name -> cloud.hashing.apis.v1.GoodDetail
	18, // 11: cloud.hashing.apis.v1.Payment.Account:type_name -> cloud.hashing.apis.v1.Account
	7,  // 12: cloud.hashing.apis.v1.Payment.CoinInfo:type_name -> cloud.hashing.apis.v1.CoinInfo
	20, // 13: cloud.hashing.apis.v1.Coupon.Pool:type_name -> cloud.hashing.apis.v1.CouponPool
	22, // 14: cloud.hashing.apis.v1.Discount.Pool:type_name -> cloud.hashing.apis.v1.DiscountPool
	25, // 15: cloud.hashing.apis.v1.Fee.Fee:type_name -> cloud.hashing.apis.v1.GoodFee
	23, // 16: cloud.hashing.apis.v1.OrderDetail.DiscountCoupon:type_name -> cloud.hashing.apis.v1.Discount
	24, // 17: cloud.hashing.apis.v1.OrderDetail.UserSpecialReduction:type_name -> cloud.hashing.apis.v1.UserSpecialReduction
	14, // 18: cloud.hashing.apis.v1.OrderDetail.GoodPaying:type_name -> cloud.hashing.apis.v1.GoodPaying
	15, // 19: cloud.hashing.apis.v1.OrderDetail.GasPayings:type_name -> cloud.hashing.apis.v1.GasPaying
	16, // 20: cloud.hashing.apis.v1.OrderDetail.Compensates:type_name -> cloud.hashing.apis.v1.Compensate
	17, // 21: cloud.hashing.apis.v1.OrderDetail.OutOfGases:type_name -> cloud.hashing.apis.v1.OutOfGas
	19, // 22: cloud.hashing.apis.v1.OrderDetail.Payment:type_name -> cloud.hashing.apis.v1.Payment
	21, // 23: cloud.hashing.apis.v1.OrderDetail.Coupon:type_name -> cloud.hashing.apis.v1.Coupon
	27, // 24: cloud.hashing.apis.v1.GetOrderDetailResponse.Detail:type_name -> cloud.hashing.apis.v1.OrderDetail
	27, // 25: cloud.hashing.apis.v1.GetOrdersDetailByAppUserResponse.Details:type_name -> cloud.hashing.apis.v1.OrderDetail
	27, // 26: cloud.hashing.apis.v1.GetOrdersDetailByAppResponse.Details:type_name -> cloud.hashing.apis.v1.OrderDetail
	27, // 27: cloud.hashing.apis.v1.GetOrdersDetailByGoodResponse.Details:type_name -> cloud.hashing.apis.v1.OrderDetail
	38, // 28: cloud.hashing.apis.v1.SubmitOrderResponse.Info:type_name -> cloud.hashing.apis.v1.Order
	36, // 29: cloud.hashing.apis.v1.CreateOrderPaymentRequest.Fees:type_name -> cloud.hashing.apis.v1.OrderFee
	27, // 30: cloud.hashing.apis.v1.CreateOrderPaymentResponse.Info:type_name -> cloud.hashing.apis.v1.OrderDetail
	42, // 31: cloud.hashing.apis.v1.CloudHashingApis.Version:input_type -> google.protobuf.Empty
	11, // 32: cloud.hashing.apis.v1.CloudHashingApis.GetGoodsDetail:input_type -> cloud.hashing.apis.v1.GetGoodsDetailRequest
	9,  // 33: cloud.hashing.apis.v1.CloudHashingApis.GetGoodDetail:input_type -> cloud.hashing.apis.v1.GetGoodDetailRequest
	37, // 34: cloud.hashing.apis.v1.CloudHashingApis.SubmitOrder:input_type -> cloud.hashing.apis.v1.SubmitOrderRequest
	40, // 35: cloud.hashing.apis.v1.CloudHashingApis.CreateOrderPayment:input_type -> cloud.hashing.apis.v1.CreateOrderPaymentRequest
	28, // 36: cloud.hashing.apis.v1.CloudHashingApis.GetOrderDetail:input_type -> cloud.hashing.apis.v1.GetOrderDetailRequest
	30, // 37: cloud.hashing.apis.v1.CloudHashingApis.GetOrdersDetailByAppUser:input_type -> cloud.hashing.apis.v1.GetOrdersDetailByAppUserRequest
	32, // 38: cloud.hashing.apis.v1.CloudHashingApis.GetOrdersDetailByApp:input_type -> cloud.hashing.apis.v1.GetOrdersDetailByAppRequest
	34, // 39: cloud.hashing.apis.v1.CloudHashingApis.GetOrdersDetailByGood:input_type -> cloud.hashing.apis.v1.GetOrdersDetailByGoodRequest
	1,  // 40: cloud.hashing.apis.v1.CloudHashingApis.Version:output_type -> cloud.hashing.apis.v1.VersionResponse
	12, // 41: cloud.hashing.apis.v1.CloudHashingApis.GetGoodsDetail:output_type -> cloud.hashing.apis.v1.GetGoodsDetailResponse
	10, // 42: cloud.hashing.apis.v1.CloudHashingApis.GetGoodDetail:output_type -> cloud.hashing.apis.v1.GetGoodDetailResponse
	39, // 43: cloud.hashing.apis.v1.CloudHashingApis.SubmitOrder:output_type -> cloud.hashing.apis.v1.SubmitOrderResponse
	41, // 44: cloud.hashing.apis.v1.CloudHashingApis.CreateOrderPayment:output_type -> cloud.hashing.apis.v1.CreateOrderPaymentResponse
	29, // 45: cloud.hashing.apis.v1.CloudHashingApis.GetOrderDetail:output_type -> cloud.hashing.apis.v1.GetOrderDetailResponse
	31, // 46: cloud.hashing.apis.v1.CloudHashingApis.GetOrdersDetailByAppUser:output_type -> cloud.hashing.apis.v1.GetOrdersDetailByAppUserResponse
	33, // 47: cloud.hashing.apis.v1.CloudHashingApis.GetOrdersDetailByApp:output_type -> cloud.hashing.apis.v1.GetOrdersDetailByAppResponse
	35, // 48: cloud.hashing.apis.v1.CloudHashingApis.GetOrdersDetailByGood:output_type -> cloud.hashing.apis.v1.GetOrdersDetailByGoodResponse
	40, // [40:49] is the sub-list for method output_type
	31, // [31:40] is the sub-list for method input_type
	31, // [31:31] is the sub-list for extension type_name
	31, // [31:31] is the sub-list for extension extendee
	0,  // [0:31] is the sub-list for field type_name
}

func init() { file_npool_cloud_hashing_apis_proto_init() }
func file_npool_cloud_hashing_apis_proto_init() {
	if File_npool_cloud_hashing_apis_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_npool_cloud_hashing_apis_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PageInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VendorLocationInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetAreaInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PriceCurrency); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CoinInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetGoodsDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodPaying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GasPaying); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Compensate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutOfGas); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Account); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CouponPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Coupon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiscountPool); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Discount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSpecialReduction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoodFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrderDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersDetailByAppUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersDetailByAppUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersDetailByAppRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersDetailByAppResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersDetailByGoodRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetOrdersDetailByGoodResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderFee); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOrderRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Order); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitOrderResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPaymentRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_npool_cloud_hashing_apis_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateOrderPaymentResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_npool_cloud_hashing_apis_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   42,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_npool_cloud_hashing_apis_proto_goTypes,
		DependencyIndexes: file_npool_cloud_hashing_apis_proto_depIdxs,
		MessageInfos:      file_npool_cloud_hashing_apis_proto_msgTypes,
	}.Build()
	File_npool_cloud_hashing_apis_proto = out.File
	file_npool_cloud_hashing_apis_proto_rawDesc = nil
	file_npool_cloud_hashing_apis_proto_goTypes = nil
	file_npool_cloud_hashing_apis_proto_depIdxs = nil
}
